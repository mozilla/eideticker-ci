<?xml version='1.0' encoding='UTF-8'?>
<org.jenkinsci.plugins.managedscripts.ScriptBuildStepConfigProvider plugin="managed-scripts@1.1.1">
  <configs>
    <entry>
      <string>org.jenkinsci.plugins.managedscripts.ScriptConfig1405012342230</string>
      <org.jenkinsci.plugins.managedscripts.ScriptConfig>
        <id>org.jenkinsci.plugins.managedscripts.ScriptConfig1405012342230</id>
        <name>Install executable on device</name>
        <comment>Installs an executable on device in /data/local</comment>
        <content>#!/bin/bash -ex
DEVICE_ROOT=`dm deviceroot`
TMP_LOCATION=$DEVICE_ROOT/$1
dm push $1 $TMP_LOCATION
dm shell --root cp $TMP_LOCATION /data/local/$1
dm shell --root rm $TMP_LOCATION
dm shell --root chmod 700 /data/local/$1</content>
        <args>
          <org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
            <name>EXECUTABLE_NAME</name>
          </org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
        </args>
      </org.jenkinsci.plugins.managedscripts.ScriptConfig>
    </entry>
    <entry>
      <string>org.jenkinsci.plugins.managedscripts.ScriptConfig1405012229776</string>
      <org.jenkinsci.plugins.managedscripts.ScriptConfig>
        <id>org.jenkinsci.plugins.managedscripts.ScriptConfig1405012229776</id>
        <name>Build Decklink</name>
        <comment>Build Decklink Capture Library</comment>
        <content>#!/bin/bash -ex
cd src/videocapture/videocapture/decklink/
make</content>
        <args/>
      </org.jenkinsci.plugins.managedscripts.ScriptConfig>
    </entry>
    <entry>
      <string>org.jenkinsci.plugins.managedscripts.ScriptConfig1381394514932</string>
      <org.jenkinsci.plugins.managedscripts.ScriptConfig>
        <id>org.jenkinsci.plugins.managedscripts.ScriptConfig1381394514932</id>
        <name>Install Eideticker dependencies</name>
        <comment>Install Eideticker dependencies</comment>
        <content>#!/bin/bash -ex
./bootstrap.sh</content>
        <args/>
      </org.jenkinsci.plugins.managedscripts.ScriptConfig>
    </entry>
    <entry>
      <string>org.jenkinsci.plugins.managedscripts.ScriptConfig1381393646026</string>
      <org.jenkinsci.plugins.managedscripts.ScriptConfig>
        <id>org.jenkinsci.plugins.managedscripts.ScriptConfig1381393646026</id>
        <name>Reset Gaia</name>
        <comment>Flash Gaia to the device</comment>
        <content>#!/bin/sh -ex
cd gaia
GAIA_OPTIMIZE=1 NOFTU=1 make reset-gaia
adb wait-for-device
adb shell &apos;while [ &quot;&quot;`getprop sys.boot_completed` != &quot;1&quot; ] ; do sleep 1; done&apos;</content>
        <args/>
      </org.jenkinsci.plugins.managedscripts.ScriptConfig>
    </entry>
    <entry>
      <string>org.jenkinsci.plugins.managedscripts.ScriptConfig1397495425159</string>
      <org.jenkinsci.plugins.managedscripts.ScriptConfig>
        <id>org.jenkinsci.plugins.managedscripts.ScriptConfig1397495425159</id>
        <name>Forward Marionette port via ADB</name>
        <comment>Forward socket connections for connecting to Marionette</comment>
        <content>#!/bin/bash -ex
adb forward tcp:2828 tcp:2828</content>
        <args/>
      </org.jenkinsci.plugins.managedscripts.ScriptConfig>
    </entry>
    <entry>
      <string>org.jenkinsci.plugins.managedscripts.ScriptConfig1397640880721</string>
      <org.jenkinsci.plugins.managedscripts.ScriptConfig>
        <id>org.jenkinsci.plugins.managedscripts.ScriptConfig1397640880721</id>
        <name>Download B2G</name>
        <comment>Download the B2G build from the specified location</comment>
        <content>#!/bin/bash -ex
wget -r -l1 -nd -np -A.en-US.android-arm.tar.gz --user=${B2G_BUILD_USERNAME} --password=${B2G_BUILD_PASSWORD} $1
FILES=&quot;gaia.zip sources.xml $2.zip&quot;
for FILE in ${FILES}; do
  wget --user=${B2G_BUILD_USERNAME} --password=${B2G_BUILD_PASSWORD} $1/${FILE}
done
mv b2g-*.en-US.android-arm.tar.gz b2g.en-US.android-arm.tar.gz
mv $2.zip device.zip</content>
        <args>
          <org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
            <name>URL</name>
          </org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
          <org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
            <name>DEVICE</name>
          </org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
        </args>
      </org.jenkinsci.plugins.managedscripts.ScriptConfig>
    </entry>
    <entry>
      <string>org.jenkinsci.plugins.managedscripts.ScriptConfig1381395043707</string>
      <org.jenkinsci.plugins.managedscripts.ScriptConfig>
        <id>org.jenkinsci.plugins.managedscripts.ScriptConfig1381395043707</id>
        <name>Create virtual environment</name>
        <comment>Create virtual environment</comment>
        <content>#!/bin/bash -ex
virtualenv .env</content>
        <args/>
      </org.jenkinsci.plugins.managedscripts.ScriptConfig>
    </entry>
    <entry>
      <string>org.jenkinsci.plugins.managedscripts.ScriptConfig1397557096176</string>
      <org.jenkinsci.plugins.managedscripts.ScriptConfig>
        <id>org.jenkinsci.plugins.managedscripts.ScriptConfig1397557096176</id>
        <name>Fetch test results</name>
        <comment>Copy the historical test results from the remote dashboard</comment>
        <content>#!/bin/bash -ex
./bin/copy-dashboard.py --dashboard-id ${DASHBOARD_ID} --device-id ${DEVICE_ID} --skip-metadata ${DASHBOARD_URL} ${DASHBOARD_LOCAL_PATH}</content>
        <args/>
      </org.jenkinsci.plugins.managedscripts.ScriptConfig>
    </entry>
    <entry>
      <string>org.jenkinsci.plugins.managedscripts.ScriptConfig1405032936361</string>
      <org.jenkinsci.plugins.managedscripts.ScriptConfig>
        <id>org.jenkinsci.plugins.managedscripts.ScriptConfig1405032936361</id>
        <name>Run tests (Android)</name>
        <comment>Run the tests and update the dashboard for Android</comment>
        <content>#!/bin/bash -ex
rm -rf /tmp/eideticker/*
dm reboot --wait
TESTS=&quot;startup-abouthome-dirty startup-abouthome-fresh nytimes-load-poststartup nytimes-load taskjs cnn imgur nightly&quot;
./bin/update-dashboard.py --output-dir=${DASHBOARD_LOCAL_PATH} --apk fennec.apk --num-runs=3 --dashboard-remote-path=${DASHBOARD_REMOTE_PATH} ${TESTS}
zip -ur ${WORKSPACE}/dashboard.zip ${DASHBOARD_LOCAL_PATH}</content>
        <args/>
      </org.jenkinsci.plugins.managedscripts.ScriptConfig>
    </entry>
    <entry>
      <string>org.jenkinsci.plugins.managedscripts.ScriptConfig1381394871633</string>
      <org.jenkinsci.plugins.managedscripts.ScriptConfig>
        <id>org.jenkinsci.plugins.managedscripts.ScriptConfig1381394871633</id>
        <name>Build PointGrey</name>
        <comment>Build PointGrey capture library</comment>
        <content>#!/bin/bash -ex
cd src/videocapture/videocapture/pointgrey/
make</content>
        <args/>
      </org.jenkinsci.plugins.managedscripts.ScriptConfig>
    </entry>
    <entry>
      <string>org.jenkinsci.plugins.managedscripts.ScriptConfig1406023587150</string>
      <org.jenkinsci.plugins.managedscripts.ScriptConfig>
        <id>org.jenkinsci.plugins.managedscripts.ScriptConfig1406023587150</id>
        <name>Reset memory allocation</name>
        <comment>Set the amount of memory allocated to the B2G device</comment>
        <content>#!/bin/bash -e
echo -e &quot;\n\033[1mResetting memory allocation\033[0m&quot;
adb reboot bootloader
fastboot oem mem $DEVICE_MEMORY
fastboot reboot
sleep 60</content>
        <args/>
      </org.jenkinsci.plugins.managedscripts.ScriptConfig>
    </entry>
    <entry>
      <string>org.jenkinsci.plugins.managedscripts.ScriptConfig1381394662775</string>
      <org.jenkinsci.plugins.managedscripts.ScriptConfig>
        <id>org.jenkinsci.plugins.managedscripts.ScriptConfig1381394662775</id>
        <name>Get dimensions</name>
        <comment>Get capture dimensions</comment>
        <content>#!/bin/bash -ex
PROPERTIES=eideticker.properties
touch $PROPERTIES
if [ -z &quot;$CAPTURE_AREA&quot; ]; then
  ./bin/getdimensions.py --output-file=$PROPERTIES --output-screenshot=dimensions.png --wifi-settings=${WORKSPACE}/wifi.json
fi</content>
        <args/>
      </org.jenkinsci.plugins.managedscripts.ScriptConfig>
    </entry>
    <entry>
      <string>org.jenkinsci.plugins.managedscripts.ScriptConfig1405010365649</string>
      <org.jenkinsci.plugins.managedscripts.ScriptConfig>
        <id>org.jenkinsci.plugins.managedscripts.ScriptConfig1405010365649</id>
        <name>Install Fennec</name>
        <comment>Install fennec .apk on device</comment>
        <content>#!/bin/bash -ex

dm -v install fennec.apk</content>
        <args/>
      </org.jenkinsci.plugins.managedscripts.ScriptConfig>
    </entry>
    <entry>
      <string>org.jenkinsci.plugins.managedscripts.ScriptConfig1387475764685</string>
      <org.jenkinsci.plugins.managedscripts.ScriptConfig>
        <id>org.jenkinsci.plugins.managedscripts.ScriptConfig1387475764685</id>
        <name>Create WiFi settings</name>
        <comment>Create a WiFi settings file</comment>
        <content>#!/bin/bash -ex
./bin/create-wifi-settings-file.py &quot;$1&quot; $2 $3 &gt; wifi.json</content>
        <args>
          <org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
            <name>SSID</name>
          </org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
          <org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
            <name>SECURITY</name>
          </org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
          <org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
            <name>PASSWORD</name>
          </org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
        </args>
      </org.jenkinsci.plugins.managedscripts.ScriptConfig>
    </entry>
    <entry>
      <string>org.jenkinsci.plugins.managedscripts.ScriptConfig1404941328553</string>
      <org.jenkinsci.plugins.managedscripts.ScriptConfig>
        <id>org.jenkinsci.plugins.managedscripts.ScriptConfig1404941328553</id>
        <name>Download Fennec</name>
        <comment>Download the Fennec .apk from specified location</comment>
        <content>wget -r -l1 -nd -np -Afennec*android-arm\.apk $1
mv *.apk fennec.apk</content>
        <args/>
      </org.jenkinsci.plugins.managedscripts.ScriptConfig>
    </entry>
    <entry>
      <string>org.jenkinsci.plugins.managedscripts.ScriptConfig1399897611295</string>
      <org.jenkinsci.plugins.managedscripts.ScriptConfig>
        <id>org.jenkinsci.plugins.managedscripts.ScriptConfig1399897611295</id>
        <name>Full flash B2G</name>
        <comment>Perform a full flash on a B2G device</comment>
        <content>#!/bin/bash -e

# This script is maintained at:
# https://gist.github.com/davehunt/f390693d59d285ea22da

# Preconditions:
# 1. device.zip and sources.xml must be present for this script to work
# 2. the device also has to be oem unlocked so we have fastboot mode

function show_free_space() {
    echo -e &quot;\n\033[1mShowing free space\033[0m&quot;
    adb shell df
}

function show_version() {
    echo -e &quot;\n\033[1mShowing version details\033[0m&quot;
    VIRTUALENV=mozversion_temp
    virtualenv -q $VIRTUALENV
    source $VIRTUALENV/bin/activate
    pip install mozversion -q
    set +e
    mozversion --sources=sources.xml
    set -e
    deactivate
}

function flash() {
    echo -e &quot;\n\033[1mFlashing\033[0m&quot;
    B2G_DIR=flash_temp
    rm -rf $B2G_DIR &amp;&amp; mkdir $B2G_DIR
    unzip -q device.zip -d $B2G_DIR
    adb reboot bootloader &amp;&amp; sleep 10
    fastboot flash boot $B2G_DIR/b2g-distro/out/target/product/*/boot.img
    fastboot flash system $B2G_DIR/b2g-distro/out/target/product/*/system.img
    fastboot flash userdata $B2G_DIR/b2g-distro/out/target/product/*/userdata.img
    fastboot flash recovery $B2G_DIR/b2g-distro/out/target/product/*/recovery.img
    fastboot reboot
}

show_free_space
flash
sleep 60
show_free_space
show_version
echo &quot;&quot;</content>
        <args/>
      </org.jenkinsci.plugins.managedscripts.ScriptConfig>
    </entry>
    <entry>
      <string>org.jenkinsci.plugins.managedscripts.ScriptConfig1402930586634</string>
      <org.jenkinsci.plugins.managedscripts.ScriptConfig>
        <id>org.jenkinsci.plugins.managedscripts.ScriptConfig1402930586634</id>
        <name>Set Gaia version</name>
        <comment>Set version for Gaia compatibility</comment>
        <content>#!/bin/bash -ex
./set_version.sh $1</content>
        <args>
          <org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
            <name>VERSION</name>
          </org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
        </args>
      </org.jenkinsci.plugins.managedscripts.ScriptConfig>
    </entry>
    <entry>
      <string>org.jenkinsci.plugins.managedscripts.ScriptConfig1381394732681</string>
      <org.jenkinsci.plugins.managedscripts.ScriptConfig>
        <id>org.jenkinsci.plugins.managedscripts.ScriptConfig1381394732681</id>
        <name>Run tests (B2G)</name>
        <comment>Run the tests and update the dashboard for B2G</comment>
        <content>#!/bin/bash -x
adb logcat -c
TESTS=&quot;b2g-gallery-startup b2g-music-startup b2g-settings-startup b2g-camera-startup b2g-marketplace-startup b2g-dialer-startup b2g-template-startup&quot;
./bin/update-dashboard.py --output-dir=${DASHBOARD_LOCAL_PATH} --sources-xml=${WORKSPACE}/sources.xml --num-runs=3 --wifi-settings=${WORKSPACE}/wifi.json --no-sync-time --dashboard-remote-path=${DASHBOARD_REMOTE_PATH} ${TESTS}
TEST_RESULT=$?
adb logcat -v threadtime -d &gt; logcat.txt
zip -ur ${WORKSPACE}/dashboard.zip ${DASHBOARD_LOCAL_PATH}
exit ${TEST_RESULT}
</content>
        <args/>
      </org.jenkinsci.plugins.managedscripts.ScriptConfig>
    </entry>
    <entry>
      <string>org.jenkinsci.plugins.managedscripts.ScriptConfig1381393993637</string>
      <org.jenkinsci.plugins.managedscripts.ScriptConfig>
        <id>org.jenkinsci.plugins.managedscripts.ScriptConfig1381393993637</id>
        <name>Shallow flash B2G (non-RIL)</name>
        <comment>Perform a shallow flash on a B2G device with a non-RIL build</comment>
        <content>#!/bin/bash -e

# This script is maintained at:
# https://gist.github.com/davehunt/7646076

# adb root, then remount and stop b2g
function adb_root_remount() {
    echo -e &quot;\n\033[1mRoot and remount\033[0m&quot;
    adb root
    adb wait-for-device
    adb remount
    adb wait-for-device
    adb shell mount -o remount,rw /system
    adb wait-for-device
    stop_b2g
}

# adb sync then reboot
function adb_reboot() {
    echo -e &quot;\n\033[1mRebooting\033[0m&quot;
    adb shell sync
    adb shell reboot
    adb wait-for-device
    echo &quot;Done&quot;
}

# stop b2g
function stop_b2g() {
    echo &quot;Stopping b2g&quot;
    adb shell stop b2g
    adb wait-for-device

    ATTEMPTS=5
    COUNTER=0
    RESULT=0
    while [ $COUNTER -lt $ATTEMPTS ] &amp;&amp; [ $RESULT == 0 ]; do
        adb shell lsof | grep b2g &gt; /dev/null &amp;&amp; RESULT=0 || RESULT=1
        let COUNTER=COUNTER+1
    done
    if [ $COUNTER == $ATTEMPTS ] &amp;&amp; [ $RESULT == 0 ]; then
        echo &quot;The b2g process still had files open after $ATTEMPTS attempts&quot;
        adb_reboot
        adb_root_remount
    fi
}

# remove files from the device
function remove() {
    echo &quot;Removing $1&quot;

    ATTEMPTS=5
    COUNTER=0
    RESULT=0
    while [ $COUNTER -lt $ATTEMPTS ] &amp;&amp; [ $RESULT == 0 ]; do
        adb shell rm -r $1 | grep &quot;No such file&quot; &gt; /dev/null &amp;&amp; RESULT=1 || RESULT=0
        let COUNTER=COUNTER+1
    done
    if [ $COUNTER == $ATTEMPTS ] &amp;&amp; [ $RESULT == 0 ]; then
        echo &quot;Failed to remove $1 after $ATTEMPTS attempts&quot;
    fi
}

# clean cache, gaia (webapps) and profiles
function clean() {
    show_free_space
    echo -e &quot;\n\033[1mCleaning\033[0m&quot;
    remove /cache/*
    remove /data/b2g/*
    remove /data/local/storage/persistent/*
    remove /data/local/svoperapps
    remove /data/local/webapps
    remove /data/local/user.js
    remove /data/local/permissions.sqlite*
    remove /data/local/OfflineCache
    remove /data/local/indexedDB
    remove /data/local/debug_info_trigger
    remove /system/b2g/webapps
    remove /data/misc/wifi/*
    # delete battery charging status
    remove /system/bin/battery_charging
    show_free_space
}

# push gaia into device
function push_gaia() {
    echo -e &quot;\n\033[1mPushing Gaia\033[0m&quot;
    GAIA_DIR=shallowflashgaia_temp
    rm -rf $GAIA_DIR &amp;&amp; mkdir $GAIA_DIR
    unzip -q gaia.zip -d $GAIA_DIR
    cat $GAIA_DIR/gaia/profile/user.js | sed -e &quot;s/user_pref/pref/&quot; &gt; $GAIA_DIR/user.js
    adb shell mkdir -p /system/b2g/defaults/pref
    adb push $GAIA_DIR/gaia/profile/webapps /system/b2g/webapps
    adb push $GAIA_DIR/user.js /system/b2g/defaults/pref
    adb push $GAIA_DIR/gaia/profile/settings.json /system/b2g/defaults
    show_free_space
}

# push gecko into device
function push_gecko() {
    echo -e &quot;\n\033[1mPushing Gecko\033[0m&quot;
    GECKO_DIR=shallowflashgecko_temp
    rm -rf $GECKO_DIR &amp;&amp; mkdir $GECKO_DIR
    tar -xzf b2g.en-US.android-arm.tar.gz -C $GECKO_DIR
    adb push $GECKO_DIR/b2g /system/b2g
    # uninstall old ril
    adb shell rm -r /system/b2g/distribution/bundles/libqc_b2g_location
    adb shell rm -r /system/b2g/distribution/bundles/libqc_b2g_ril
    # delete incompatible extensions
    adb shell rm -r /system/b2g/distribution/bundles/liblge_b2g_extension
    show_free_space
}

function show_free_space() {
    echo -e &quot;\n\033[1mShowing free space\033[0m&quot;
    adb shell df
}

function show_version() {
    echo -e &quot;\n\033[1mShowing version details\033[0m&quot;
    VIRTUALENV=mozversion_temp
    virtualenv -q $VIRTUALENV
    source $VIRTUALENV/bin/activate
    pip install mozversion -q
    set +e
    mozversion --sources=sources.xml
    set -e
    deactivate
}

adb_reboot
adb_root_remount
clean
push_gaia
push_gecko
adb_reboot
sleep 60
show_version
echo &quot;&quot;</content>
        <args/>
      </org.jenkinsci.plugins.managedscripts.ScriptConfig>
    </entry>
  </configs>
</org.jenkinsci.plugins.managedscripts.ScriptBuildStepConfigProvider>
